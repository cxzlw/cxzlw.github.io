<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>聊聊知乎盐选反爬 (回答页篇)</title>
    <link href="/2023/07/05/zhihu-aac-old/"/>
    <url>/2023/07/05/zhihu-aac-old/</url>
    
    <content type="html"><![CDATA[<p>近些阵子知乎上线了针对专栏<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="专栏反爬现已更新，故本文只以回答反爬为演示。">[1]</span></a></sup>中盐选文章的反爬系统，随后该系统也被运用在知乎回答页面中的盐选文章上，具体表现为爬取的文章内容中出现大量的错乱词汇。而在本篇文章中我们将一步步带领各位解开这些乱码，在这个过程中我们将对字体反爬有更深入的认识，并学到运用字体反爬时需要注意的问题。</p><h2 id="一、知乎反爬效果"><a href="#一、知乎反爬效果" class="headerlink" title="一、知乎反爬效果"></a>一、知乎反爬效果</h2><p>来自知乎回答<a href="https://www.zhihu.com/question/41922324/answer/3073556909">不被爱是一种什么样的感受？ - 知乎</a></p><p><img src="/../imgs/image.png" alt="乱码示意图"> </p><p>如图所示，在页面源码中出现了大量乱码，例如（原字，错字）：<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="由于知乎回答页反爬使用了两套字体，故本文所有截图，代码运行结果等内容可能与实际不符。你可以选择以实际为主或刷新页面直到页面显示的内容与本文一致。">[2]</span></a></sup></p><ul><li>中 -&gt; 在</li><li>是 -&gt; 时</li><li>上 -&gt; 大</li></ul><p>这些乱码使得文章可读性大大下降，那么乱码是怎么产生的？又如何解决这个问题呢？</p><h2 id="二、找寻乱码真凶"><a href="#二、找寻乱码真凶" class="headerlink" title="二、找寻乱码真凶"></a>二、找寻乱码真凶</h2><p>观察上述现象，页面源码中的字，在被显示到页面后，居然变成了正确的字。因此我们初步推断知乎在该页面运用了字体反爬。</p><p>接下来我们打开 F12 -&gt; Network 页面，选择 Font，观察知乎加载的字体。</p><p><img src="/../imgs/image-1.png" alt="知乎加载的字体"></p><p>右键选择 Open in new tab 将字体保存下来。</p><p><img src="/../imgs/image-2.png" alt="下载的字体文件"></p><p>将字体后缀名改为 .ttf <sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label=".ttf 是因为 `data:font/ttf;...` 代表该字体是 ttf 格式的。">[3]</span></a></sup> 并打开。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/../imgs/image-3.png" alt="正常字体"></div><div class="group-image-wrap"><img src="/../imgs/image-4.png" alt="反爬字体"></div></div></div><figcaption aria-hidden="true" class="image-caption">左：正常字体 右：反爬字体</figcaption><p>与正常字体对比，我们下载的字体明显替换了部分字体，这便是知乎用于反爬的字体了。接下来我们将分析这个字体并给出应对方案。</p><h2 id="三、致命缺陷"><a href="#三、致命缺陷" class="headerlink" title="三、致命缺陷"></a>三、致命缺陷</h2><p>字体反爬的根本原理是替换原本的字为一个新字，再用字体将新字渲染为原字，这样对程序而言就只见到新字而不是旧字了，而用户看到的还是原本的内容。因此只要找到新字与原字间的对应关系便可解决该反爬。而要找到这个对应关系，抓住字体中各个字形的特征是必不可少的一环。</p><p>我们打开 <a href="https://fontdrop.info/">FontDrop!</a> 加载字体，向下翻，观察字形的特征。</p><p><img src="/../imgs/image-5.png" alt="字体中的字形"></p><p>我们发现字形的 Glyph 为 uni662F 而 Unicode 为 65F6，接下来我们试着查询这两个十六进制数对应的字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">glyph = <span class="hljs-string">&quot;\u662F&quot;</span><br>unicode = <span class="hljs-string">&quot;\u65F6&quot;</span><br><span class="hljs-built_in">print</span>(glyph, unicode)<br><span class="hljs-comment"># output: 是 时</span><br></code></pre></td></tr></table></figure><p>正好，上文提到，「是」在源码中被替换为了「时」。知乎在反爬字体中保留了原字与新字的对应关系，为我们提供了一个极为便捷的捷径，避免了对字形笔画的具体分析，这也是其字体反爬系统的致命缺陷，各位在自己的网站运用字体反爬时也要注意这一点。</p><p>至此，字形的特征与对应关系都被我们分析出了，接下来我们将编写程序从字体中提取对应关系。</p><h2 id="四、提取对应关系"><a href="#四、提取对应关系" class="headerlink" title="四、提取对应关系"></a>四、提取对应关系</h2><p>要提取各个字间的对应关系，首先我们需要安装 fontTools <sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="fontTools文档：[fontTools Docs — fontTools Documentation](https://fonttools.readthedocs.io/en/latest/)">[4]</span></a></sup>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install fonttools<br></code></pre></td></tr></table></figure><p>用 <code>ttLib.TTFont(filename)</code> 打开字体：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fontTools <span class="hljs-keyword">import</span> ttLib<br><br>font = ttLib.TTFont(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Input font filename: &quot;</span>))<br></code></pre></td></tr></table></figure><p>初始化一个存储对应关系的字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">zhihu_dict = &#123;&#125;<br></code></pre></td></tr></table></figure><p>遍历字形，获得其 Glyph 与 Unicode，并写入字典（注意这里的Glyph对应的字可能不是标准的字，比如是康熙部首<sup id="fnref:5" class="footnote-ref"><a href="#fn:5" rel="footnote"><span class="hint--top hint--rounded" aria-label="康熙部首相关文章：[康熙部首导致的字典查询异常](https://mp.weixin.qq.com/s?src=11&timestamp=1688488134&ver=4630&signature=JXLh7up18JREGzu-hyDHNVu4-yW-RQnmOFTegveHvhlbDBrcwfMRe9c0b15eJPVo5VFZ-BkntaZvQ1EOGDIdWZ4*dM*9NMTwroaqkGu17aagpE6SDr8v2FgsrmKGus4Z&new=1)">[5]</span></a></sup>，因此我们要对其标准化<sup id="fnref:6" class="footnote-ref"><a href="#fn:6" rel="footnote"><span class="hint--top hint--rounded" aria-label="标准化相关文章：[化异为同，Python 在背后帮你做的转换](https://mp.weixin.qq.com/s?src=11&timestamp=1688488134&ver=4630&signature=JXLh7up18JREGzu-hyDHNVu4-yW-RQnmOFTegveHvhnpJwhWtfcrbfZyZ0LrFFbzVDaXDT2onRWaIWo*r2Sv9Tg*ZBiuWotp9WQdbrawvxGLj0T5U-xC2fnssc4lEsLl&new=1#:~:text=%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%EF%BC%8C%E6%89%8B%E5%86%99%E5%AD%97%E7%AC%A6%F0%9D%91%93%E9%80%9A%E8%BF%87%20NFKC%20%E6%A0%87%E5%87%86%E8%BD%AC%E6%8D%A2%E4%BB%A5%E5%90%8E%EF%BC%8C%E5%B0%B1%E6%98%AF%E6%99%AE%E9%80%9A%E7%9A%84%E5%AD%97%E6%AF%8Df%EF%BC%8C%E6%89%80%E4%BB%A5%E5%9C%A8%20Python%20%E9%87%8C%E9%9D%A2%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%BD%9C%E4%B8%BA%E5%8F%98%E9%87%8F%E5%90%8D%EF%BC%8C%E8%BF%99%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E6%98%AF%E4%B8%80%E6%A0%B7%E7%9A%84%E3%80%82)">[6]</span></a></sup>）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> unicodedata <span class="hljs-keyword">import</span> normalize<br><br>cmap = font.getBestCmap()<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> cmap.items():<br>    zhihu_dict[<span class="hljs-built_in">chr</span>(x[<span class="hljs-number">0</span>])] = normalize(<span class="hljs-string">&quot;NFKC&quot;</span>, <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(x[<span class="hljs-number">1</span>][<span class="hljs-number">3</span>:], <span class="hljs-number">16</span>)))<br><br><span class="hljs-built_in">print</span>(zhihu_dict)  <span class="hljs-comment"># &#123;&#x27;一&#x27;: &#x27;不&#x27;, ......, &#x27;这&#x27;: &#x27;发&#x27;&#125;</span><br></code></pre></td></tr></table></figure><p>（这里的 cmap 是一个 dict，是字形的 {Unicode: Glyph}<sup id="fnref:7" class="footnote-ref"><a href="#fn:7" rel="footnote"><span class="hint--top hint--rounded" aria-label="其中 Unicode 为 int 而 Glyph 为形如 uni4E0D 的 str">[7]</span></a></sup>）</p><p>接下来，我们将使用得到的对应关系将带乱码的文章转为正常文章。</p><h2 id="五、去除乱码"><a href="#五、去除乱码" class="headerlink" title="五、去除乱码"></a>五、去除乱码</h2><p>这段代码很简单，不作解释。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">raw_content = <span class="hljs-string">&quot;在间那块奶酪夹心，时饼干被的喜爱了灵魂。&quot;</span><br>new_content = raw_content.translate(<span class="hljs-built_in">str</span>.maketrans(zhihu_dict))<br><span class="hljs-built_in">print</span>(new_content)  <span class="hljs-comment"># 中间那块奶酪夹心，是饼干被人喜爱的灵魂。</span><br></code></pre></td></tr></table></figure><h2 id="六、全部代码"><a href="#六、全部代码" class="headerlink" title="六、全部代码"></a>六、全部代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fontTools <span class="hljs-keyword">import</span> ttLib<br><span class="hljs-keyword">from</span> unicodedata <span class="hljs-keyword">import</span> normalize<br><br>font = ttLib.TTFont(<span class="hljs-string">&quot;DynamicFonts30.ttf&quot;</span>)<br><br>zhihu_dict = &#123;&#125;<br>cmap = font.getBestCmap()<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> cmap.items():<br>    zhihu_dict[<span class="hljs-built_in">chr</span>(x[<span class="hljs-number">0</span>])] = normalize(<span class="hljs-string">&quot;NFKC&quot;</span>, <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(x[<span class="hljs-number">1</span>][<span class="hljs-number">3</span>:], <span class="hljs-number">16</span>)))<br><br><span class="hljs-built_in">print</span>(zhihu_dict)  <span class="hljs-comment"># &#123;&#x27;一&#x27;: &#x27;不&#x27;, ......, &#x27;这&#x27;: &#x27;发&#x27;&#125;</span><br><br>raw_content = <span class="hljs-string">&quot;在间那块奶酪夹心，时饼干被的喜爱了灵魂。&quot;</span><br>new_content = raw_content.translate(<span class="hljs-built_in">str</span>.maketrans(zhihu_dict))<br><span class="hljs-built_in">print</span>(new_content)  <span class="hljs-comment"># 中间那块奶酪夹心，是饼干被人喜爱的灵魂。</span><br></code></pre></td></tr></table></figure><p>上面字体文件名记得换成你自己下载的字体文件名</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>在本文的带领下，我们粗略地了解了知乎所使用的反爬技术，分析了其使用的反爬字体，找出了原字与新字的对应关系，最终将带乱码的文章转为了正常文章。其中，知乎使用的反爬字体没有去掉 Unicode 与 Glyph 的对应关系，虽然这使我们更轻松地得到了对应关系，但是对于知乎而言，这种错误无疑是致命的，因此，在字体反爬的实际运用中，我们更需要避免这种错误。<sup id="fnref:8" class="footnote-ref"><a href="#fn:8" rel="footnote"><span class="hint--top hint--rounded" aria-label="关于如何创造更坚固的字体反爬系统，可以参考这篇文章：[反爬终极方案总结—字体反爬 - 知乎](https://zhuanlan.zhihu.com/p/37838586)（值得一提的是这篇文章就被发表在在知乎上2333）">[8]</span></a></sup></p><p>知乎也在该反爬系统部署到回答页不久以后升级了其专栏反爬系统，本文所介绍的致命缺陷已被修复<sup id="fnref:9" class="footnote-ref"><a href="#fn:9" rel="footnote"><span class="hint--top hint--rounded" aria-label="值得表扬( •̀ ω •́ )y">[9]</span></a></sup>，而解码新反爬系统的内容，就留到本系列的下篇吧。</p><p>（敬请期待）</p><h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><ul><li><a href="https://cdycc.cn/">C的云存储 - C的云存储所有作品均由用户提供上传分享，仅供网友学习交流!若您的权利被侵害，请联系 357158361@qq.com</a></li><li><a href="https://github.com/cxzlw/zhihuDecrypt">GitHub - cxzlw&#x2F;zhihuDecrypt</a></li><li><a href="https://github.com/cxzlw/zhihuDecryptApp">GitHub - cxzlw&#x2F;zhihuDecryptApp: The app to decrypt zhihu’s encrypted (probably not) passages.</a></li></ul><h2 id="注"><a href="#注" class="headerlink" title="注"></a>注</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>专栏反爬现已更新，故本文只以回答反爬为演示。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>由于知乎回答页反爬使用了两套字体，故本文所有截图，代码运行结果等内容可能与实际不符。你可以选择以实际为主或刷新页面直到页面显示的内容与本文一致。<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>.ttf 是因为 <code>data:font/ttf;...</code> 代表该字体是 ttf 格式的。<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>fontTools文档：<a href="https://fonttools.readthedocs.io/en/latest/">fontTools Docs — fontTools Documentation</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span>康熙部首相关文章：<a href="https://mp.weixin.qq.com/s?src=11&timestamp=1688488134&ver=4630&signature=JXLh7up18JREGzu-hyDHNVu4-yW-RQnmOFTegveHvhlbDBrcwfMRe9c0b15eJPVo5VFZ-BkntaZvQ1EOGDIdWZ4*dM*9NMTwroaqkGu17aagpE6SDr8v2FgsrmKGus4Z&new=1">康熙部首导致的字典查询异常</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span>标准化相关文章：<a href="https://mp.weixin.qq.com/s?src=11&timestamp=1688488134&ver=4630&signature=JXLh7up18JREGzu-hyDHNVu4-yW-RQnmOFTegveHvhnpJwhWtfcrbfZyZ0LrFFbzVDaXDT2onRWaIWo*r2Sv9Tg*ZBiuWotp9WQdbrawvxGLj0T5U-xC2fnssc4lEsLl&new=1#:~:text=%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%EF%BC%8C%E6%89%8B%E5%86%99%E5%AD%97%E7%AC%A6%F0%9D%91%93%E9%80%9A%E8%BF%87%20NFKC%20%E6%A0%87%E5%87%86%E8%BD%AC%E6%8D%A2%E4%BB%A5%E5%90%8E%EF%BC%8C%E5%B0%B1%E6%98%AF%E6%99%AE%E9%80%9A%E7%9A%84%E5%AD%97%E6%AF%8Df%EF%BC%8C%E6%89%80%E4%BB%A5%E5%9C%A8%20Python%20%E9%87%8C%E9%9D%A2%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%BD%9C%E4%B8%BA%E5%8F%98%E9%87%8F%E5%90%8D%EF%BC%8C%E8%BF%99%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E6%98%AF%E4%B8%80%E6%A0%B7%E7%9A%84%E3%80%82">化异为同，Python 在背后帮你做的转换</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span>其中 Unicode 为 int 而 Glyph 为形如 uni4E0D 的 str<a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span>关于如何创造更坚固的字体反爬系统，可以参考这篇文章：<a href="https://zhuanlan.zhihu.com/p/37838586">反爬终极方案总结—字体反爬 - 知乎</a>（值得一提的是这篇文章就被发表在在知乎上2333）<a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:9" class="footnote-text"><span>值得表扬( •̀ ω •́ )y<a href="#fnref:9" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>知乎</tag>
      
      <tag>反爬</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
